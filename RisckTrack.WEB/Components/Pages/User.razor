@page "/user"
@inject HttpClient Http
@using RisckTrack.WEB.Services
@using RisckTrack.WEB.Models
@inject UserService UserService
@inject UserSessionService Session
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h3>Gestión de Usuarios</h3>

@if (Session.Role != "A")
{
    <p>Acceso denegado.</p>
}
else if (users == null)
{
    <p>Cargando...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Email</th>
                <th>Usuario</th>
                <th>Rol</th>
                <th>Compañía</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var u in users)
            {
                <tr>
                    <td>@u.Email</td>
                    <td>@u.Username</td>
                    <td>@u.Role</td>
                    <td>@u.CompanyId</td>
                    <td>
                        <button @onclick="() => DeleteUser(u.Email)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h4>Nuevo Usuario</h4>
    <EditForm Model="newUser" OnValidSubmit="CreateUser">
        <InputText @bind-Value="newUser.Email" placeholder="Email" />
        <InputText @bind-Value="newUser.Password" placeholder="Password" type="password" />
        <InputText @bind-Value="newUser.Username" placeholder="Usuario" />
        <InputText @bind-Value="newUser.Role" placeholder="Rol (A/U)" />
        <InputNumber @bind-Value="newUser.CompanyId" placeholder="Compañía" />
        <button type="submit">Crear</button>
    </EditForm>
}

@code {
    private List<UserDto>? users;
    private UserDto newUser = new();

    protected override async Task OnInitializedAsync()
    {
        if (Session.Role != "A")
        {
            Navigation.NavigateTo("/");
            return;
        }

        users = await UserService.GetUsersAsync();
    }

    private async Task CreateUser()
    {
        var created = await UserService.CreateUserAsync(newUser);
        if (created)
        {
            users = await UserService.GetUsersAsync();
            newUser = new();
        }
    }

    private async Task DeleteUser(string email)
    {
        var user = users?.FirstOrDefault(u => u.Email == email);
        if (user != null)
        {
            await UserService.DeleteUserAsync(user.UserId);
            users = await UserService.GetUsersAsync();
        }
    }
}
