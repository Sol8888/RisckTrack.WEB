@using RisckTrack.WEB.Services
@using RisckTrack.WEB.Models
@inject UserService UserService
@inject CompanyService CompanyService

<h3>Users</h3>

<button class="btn btn-success mb-3" @onclick="ToggleCreateUserForm">
    @(showCreateForm ? "Cancelar" : "Crear Usuario")
</button>

@if (showCreateForm)
{
    <EditForm Model="newUser" OnValidSubmit="CreateUser">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-2">
            <label>Compañía:</label>
            <InputSelect class="form-control" @bind-Value="newUser.CompanyId">
                <option value="">Seleccione una compañía</option>
                @if (companies != null)
                {
                    @foreach (var company in companies)
                    {
                        <option value="@company.CompanyId">@company.Name</option>
                    }
                }
            </InputSelect>
        </div>

        <div class="mb-2">
            <label>Usuario:</label>
            <InputText class="form-control" @bind-Value="newUser.Username" />
        </div>
        <div class="mb-2">
            <label>Email:</label>
            <InputText class="form-control" @bind-Value="newUser.Email" />
        </div>
        <div class="mb-2">
            <label>Contraseña:</label>
            <InputText class="form-control" type="password" @bind-Value="newUser.Password" />
        </div>
        <div class="mb-2">
            <label>Rol:</label>
            <InputText class="form-control" @bind-Value="newUser.Role" />
        </div>

        <button class="btn btn-primary" type="submit">Guardar</button>
    </EditForm>
}

@if (users == null)
{
    <p>Cargando usuarios...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Usuario</th>
                <th>Email</th>
                <th>Rol</th>
                <th>Compañía</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.UserId</td>
                    <td>@user.Username</td>
                    <td>@user.Email</td>
                    <td>@user.Role</td>
                    <td>
                        @companies?.FirstOrDefault(c => c.CompanyId == user.CompanyId)?.Name
                    </td>
                    <td>
                        <button class="btn btn-warning btn-sm">Editar</button>
                        <button class="btn btn-danger btn-sm" @onclick="@(() => DeleteUser(user.UserId))">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<UserDto>? users;
    private bool showCreateForm = false;
    private UserDto newUser = new();
    private List<CompanyDto>? companies;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        companies = await CompanyService.GetCompaniesAsync();
    }

    private async Task LoadUsers()
    {
        users = await UserService.GetUsersAsync();
    }

    private void ToggleCreateUserForm()
    {
        showCreateForm = !showCreateForm;
        newUser = new(); // Reset form
    }

    private async Task CreateUser()
    {
        var success = await UserService.CreateUserAsync(newUser);
        if (success)
        {
            await LoadUsers();
            ToggleCreateUserForm();
        }
    }

    private async Task DeleteUser(int id)
    {
        await UserService.DeleteUserAsync(id);
        await LoadUsers();
    }

}
