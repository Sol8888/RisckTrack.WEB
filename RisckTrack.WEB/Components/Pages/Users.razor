@using RisckTrack.WEB.Services
@using RisckTrack.WEB.Models
@inject UserService UserService
@inject CompanyService CompanyService
@inject UserSessionService Session
@rendermode InteractiveServer

<h3>Usuarios</h3>

@if (Session.Role == "A")
{
    <button class="btn btn-success mb-3" @onclick="ToggleCreateUserForm">
        @(showCreateForm ? "Cancelar" : "Crear Usuario")
    </button>

    @if (showCreateForm)
    {
        <EditForm Model="newUser" OnValidSubmit="CreateUser">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <!-- Usuario -->
            <div class="mb-2">
                <label>Usuario:</label>
                <InputText class="form-control" @bind-Value="newUser.Username" />
            </div>

            <!-- Email -->
            <div class="mb-2">
                <label>Email:</label>
                <InputText class="form-control" @bind-Value="newUser.Email" />
            </div>

            <!-- Contraseña -->
            <div class="mb-2">
                <label>Contraseña:</label>
                <InputText class="form-control" type="password" @bind-Value="newUser.Password" />
            </div>

            <button class="btn btn-primary" type="submit">Guardar</button>
        </EditForm>
    }
}

@if (users == null)
{
    <p>Cargando usuarios...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Usuario</th>
                <th>Email</th>
                <th>Rol</th>
                <th>Compañía</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users
                    .Where(u => u.CompanyId == Session.CompanyId && u.Role == "U"))
            {
                <tr>
                    <td>@user.UserId</td>
                    <td>@user.Username</td>
                    <td>@user.Email</td>
                    <td>@user.Role</td>
                    <td>@companies?.FirstOrDefault(c => c.CompanyId == user.CompanyId)?.Name</td>
                    <td>
                        @if (Session.Role == "A")
                        {
                            <button class="btn btn-danger btn-sm" @onclick="@(() => DeleteUser(user.UserId))">Eliminar</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<UserDto>? users;
    private List<CompanyDto>? companies;
    private bool showCreateForm = false;
    private UserDto newUser = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
        companies = await CompanyService.GetCompaniesAsync();
    }

    private async Task LoadUsers()
    {
        users = await UserService.GetUsersAsync();
    }

    private void ToggleCreateUserForm()
    {
        showCreateForm = !showCreateForm;
        newUser = new(); 
    }

    private async Task CreateUser()
    {
        if (Session.Role != "A" || !Session.CompanyId.HasValue) return;

        newUser.CompanyId = Session.CompanyId.Value;
        newUser.Role = "U";

        var success = await UserService.CreateUserAsync(newUser);
        if (success)
        {
            await LoadUsers();
            ToggleCreateUserForm();
        }
    }

    private async Task DeleteUser(int id)
    {
        await UserService.DeleteUserAsync(id);
        await LoadUsers();
    }
}