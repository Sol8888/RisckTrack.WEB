@inject UserSessionService Session
@using RisckTrack.WEB.Models
@using RisckTrack.WEB.Services
@inject AssetService AssetService
@inject TeamService TeamService
@inject UserSessionService Session

<h3>Assets</h3>
<button class="btn btn-success mb-3" @onclick="ToggleCreateAssetForm">
    @(showCreateForm ? "Cancelar" : "Crear Activo")
</button>

@if (showCreateForm)
{
    <EditForm Model="newAsset" OnValidSubmit="CreateAsset">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-2">
            <label>Asset ID:</label>
            <InputText class="form-control" @bind-Value="newAsset.AssetId" />
        </div>
        <div class="mb-2">
            <label>Nombre:</label>
            <InputText class="form-control" @bind-Value="newAsset.Name" />
        </div>
        <div class="mb-2">
            <label>Tipo de Activo:</label>
            <InputSelect class="form-control" @bind-Value="newAsset.AssetTypeId">
                <option value="">Seleccione un tipo</option>
                <option value="1">Activos de datos</option>
                <option value="2">Activos de software</option>
                <option value="3">Activos de red</option>
                <option value="4">Activos de datos en la nube</option>
                <option value="5">Activos de software de identidad y acceso</option>
                <option value="6">Activos de software de comunicaciones</option>
                <option value="7">Activos de software de monitoreo y seguridad</option>
            </InputSelect>
        </div>
        <div class="mb-2">
            <label>Equipo responsable:</label>
            <InputSelect class="form-control" @bind-Value="newAsset.OwnerTeamId">
                <option value="">Seleccione un equipo</option>
                @foreach (var team in teams)
                {
                    <option value="@team.TeamId">@team.Name</option>
                }
            </InputSelect>
        </div>
        <div class="mb-2">
            <label>Contiene PII (Contine datos Personales):</label>
            <InputCheckbox class="form-check-input" @bind-Value="newAsset.ContainsPII" />
        </div>
        <div class="mb-2">
            <label>Fuente de Datos (De donde viene el activo):</label>
            <InputText class="form-control" @bind-Value="newAsset.DataSource" />
        </div>
        <div class="mb-2">
            <label>Revenue por minuto (USD)(Cuato genera el activo por minuto):</label>
            <InputNumber class="form-control" @bind-Value="newAsset.RevenuePerMinuteUsd" />
        </div>
        <div class="mb-2">
            <label>% Flujo Crítico (Porcentaje de procesos que dependen del activo (De 0 a 1)):</label>
            <InputNumber class="form-control" @bind-Value="newAsset.CriticalFlowPercentage" />
        </div>
        <div class="mb-2">
            <label>Registros PII (Registros que manejan datos personajes):</label>
            <InputNumber class="form-control" @bind-Value="newAsset.TotalPiiRecords" />
        </div>
        <div class="mb-2">
            <label>Licencia anual (USD):</label>
            <InputNumber class="form-control" @bind-Value="newAsset.AnnualLicenseCostUsd" />
        </div>
        <div class="mb-2">
            <label>Horas Soporte de Anual (USD):</label>
            <InputNumber class="form-control" @bind-Value="newAsset.AnnualSupportHours" />
        </div>
        <div class="mb-2">
            <label>Costo de la hora del Ingeniero (USD):</label>
            <InputNumber class="form-control" @bind-Value="newAsset.EngineerHourlyRateUsd" />
        </div>
        <div class="mb-2">
            <label>Downtime mensual (min) (Tiempo promedio en la que el activo estuvo fuera de servicio):</label>
            <InputNumber class="form-control" @bind-Value="newAsset.MonthlyDowntimeMin" />
        </div>
        <div class="mb-2">
            <label>Vulnerabilidades críticas anuales (Cuantos errores graves sin resolver hay ):</label>
            <InputNumber class="form-control" @bind-Value="newAsset.AnnualCriticalVulnerabilities" />
        </div>
        <div class="mb-2">
            <label>Numero de Incidentes que han pasado en el ultimo año:</label>
            <InputNumber class="form-control" @bind-Value="newAsset.DataCorruptionErrors" />
        </div>
        <div class="mb-2">
            <label>Riesgo decidido  (USD) (Cuanto esta dispuesto a perder por el activo):</label>
            <InputNumber class="form-control" @bind-Value="newAsset.DecidedRiskUsd" />
        </div>

        <button class="btn btn-primary" type="submit">Guardar</button>
    </EditForm>
}

@if (assets == null)
{
    <p>Cargando activos...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nombre</th>
                <th>Empresa</th>
                <th>PII</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var asset in assets)
            {
                <tr>
                    <td>@asset.AssetId</td>
                    <td>@asset.Name</td>
                    <td>@asset.CompanyId</td>
                    <td>@(asset.ContainsPII == true ? "Sí" : "No")</td>
                    <td>
                        <button class="btn btn-info btn-sm" @onclick="() => LoadRiskAnalysis(asset.AssetId)">Ver Análisis</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteAsset(asset.AssetId)">Eliminar</button>
                    </td>
                </tr>
                @if (riskAnalysisResults.TryGetValue(asset.AssetId, out var analysis) && analysis != null)
                {
                    <tr>
                        <td colspan="5">
                            <strong>@analysis.Name</strong><br />
                            <p><strong>Mensaje:</strong> @analysis.Message</p>
                            <ul>
                                <li><strong>Contiene PII:</strong> @(analysis.ContainsPII ? "Sí" : "No")</li>
                                <li><strong>Riesgo Aceptado:</strong> @(analysis.RiesgoAceptado ? "Sí" : "No")</li>
                                <li><strong>Decided Risk (USD):</strong> @analysis.DecidedRiskUsd</li>
                                <li><strong>VNA:</strong> @analysis.Vna</li>
                                <li><strong>SI:</strong> @analysis.Si</li>
                                <li><strong>LEF:</strong> @analysis.Lef</li>
                                <li><strong>PD:</strong> @analysis.Pd</li>
                                <li><strong>PI:</strong> @analysis.Pi</li>
                                <li><strong>CR:</strong> @analysis.Cr</li>
                                <li><strong>CES:</strong> @analysis.Ces</li>
                                <li><strong>DPF:</strong> @analysis.Dpf</li>
                                <li><strong>DIRF:</strong> @analysis.Dirf</li>
                                <li><strong>LM:</strong> @analysis.Lm</li>
                                <li><strong>LM Típico:</strong> @analysis.LM_Tipico</li>
                                <li><strong>ALE:</strong> @analysis.Ale</li>
                                <li><strong>Umbral Aceptable:</strong> @analysis.UmbralAceptable</li>
                            </ul>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}


@code {
    private List<AssetDto>? assets;
    private AssetDto newAsset = new();
    private bool showCreateForm = false;
    private List<TeamDto> teams = new();
    private Dictionary<string, RiskAnalysisResult?> riskAnalysisResults = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadAssets();
        await LoadTeams();
    }

    private async Task LoadAssets()
    {
        var allAssets = await AssetService.GetAssetsAsync();
        if (Session.CompanyId.HasValue)
        {
            assets = allAssets?.Where(a => a.CompanyId == Session.CompanyId.Value).ToList();
        }
        else
        {
            assets = new(); 
        }
    }

    private async Task LoadTeams()
    {
        if (Session.CompanyId.HasValue)
        {
            var allTeams = await TeamService.GetTeamsAsync();
            teams = allTeams.Where(t => t.CompanyId == Session.CompanyId.Value).ToList();
        }
    }

    private void ToggleCreateAssetForm()
    {
        showCreateForm = !showCreateForm;
        newAsset = new();
        if (Session.CompanyId.HasValue)
        {
            newAsset.CompanyId = Session.CompanyId.Value;
        }
    }

    private async Task CreateAsset()
    {
        var success = await AssetService.CreateAssetAsync(newAsset);
        if (success)
        {
            await LoadAssets();
            ToggleCreateAssetForm();
        }
    }

    private async Task DeleteAsset(string id)
    {
        await AssetService.DeleteAssetAsync(id);
        await LoadAssets();
    }

    private async Task LoadRiskAnalysis(string assetId)
    {
        if (!riskAnalysisResults.ContainsKey(assetId))
        {
            var result = await AssetService.GetRiskAnalysisAsync(assetId);
            riskAnalysisResults[assetId] = result;
        }
        else
        {
            riskAnalysisResults.Remove(assetId);
        }
    }
}
